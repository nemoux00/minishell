project(nemoux-minishell)

cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

cmake_policy(VERSION 2.8)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})
set(BUILD_SHARED_LIBS ON)

set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

set(CMAKE_INSTALL_PREFIX "/usr")
set(CMAKE_LIBRARY_SUFFIX "64")

option(WITH_EGL "Build with EGL" ON)

option(WITH_DEBUG "Build with DEBUG" OFF)
option(WITH_PROFILE "Build with PROFILE" OFF)
option(WITH_NEMO_DEBUG "Build with NEMODEBUG" ON)
option(WITH_NEMO_LOG "Build with NEMOLOG" ON)

FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(PIXMAN REQUIRED pixman-1)
INCLUDE_DIRECTORIES(${PIXMAN_INCLUDE_DIRS})
LINK_DIRECTORIES(${PIXMAN_LIBRARY_DIRS})

PKG_CHECK_MODULES(CAIRO REQUIRED cairo)
INCLUDE_DIRECTORIES(${CAIRO_INCLUDE_DIRS})
LINK_DIRECTORIES(${CAIRO_LIBRARY_DIRS})

PKG_CHECK_MODULES(FREETYPE REQUIRED freetype2)
INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
LINK_DIRECTORIES(${FREETYPE_LIBRARY_DIRS})

PKG_CHECK_MODULES(HARFBUZZ REQUIRED harfbuzz)
INCLUDE_DIRECTORIES(${HARFBUZZ_INCLUDE_DIRS})
LINK_DIRECTORIES(${HARFBUZZ_LIBRARY_DIRS})

PKG_CHECK_MODULES(FONTCONFIG REQUIRED fontconfig)
INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIRS})
LINK_DIRECTORIES(${FONTCONFIG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBPNG REQUIRED libpng)
INCLUDE_DIRECTORIES(${LIBPNG_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBPNG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBEXPAT REQUIRED expat)
INCLUDE_DIRECTORIES(${LIBEXPAT_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBEXPAT_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBCURL REQUIRED libcurl)
INCLUDE_DIRECTORIES(${LIBCURL_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBCURL_LIBRARY_DIRS})

PKG_CHECK_MODULES(XKBCOMMON REQUIRED xkbcommon)
INCLUDE_DIRECTORIES(${XKBCOMMON_INCLUDE_DIRS})
LINK_DIRECTORIES(${XKBCOMMON_LIBRARY_DIRS})

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -std=c++11")
set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS}")

set(NEMOUX_COMMON_LIBRARIES
	m
	jpeg
	${PIXMAN_LIBRARIES}
	${CAIRO_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
	${LIBPNG_LIBRARIES}
	${LIBEXPAT_LIBRARIES}
	${LIBCURL_LIBRARIES}
	${XKBCOMMON_LIBRARIES}
	)

if(WITH_EGL)
	add_definitions(-DNEMOUX_WITH_EGL=1)

	PKG_CHECK_MODULES(GL REQUIRED gl)
	INCLUDE_DIRECTORIES(${GL_INCLUDE_DIRS})
	LINK_DIRECTORIES(${GL_LIBRARY_DIRS})

	PKG_CHECK_MODULES(EGL REQUIRED egl)
	INCLUDE_DIRECTORIES(${EGL_INCLUDE_DIRS})
	LINK_DIRECTORIES(${EGL_LIBRARY_DIRS})

	set(NEMOUX_COMMON_LIBRARIES
		${NEMOUX_COMMON_LIBRARIES}
		${GL_LIBRARIES}
		${EGL_LIBRARIES}
		)
endif(WITH_EGL)

if(WITH_DEBUG)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
endif(WITH_DEBUG)

if(WITH_PROFILE)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
	set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} -pg")
endif(WITH_PROFILE)

if(WITH_NEMO_DEBUG)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNEMO_DEBUG_ON")
endif(WITH_NEMO_DEBUG)

if(WITH_NEMO_LOG)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNEMO_LOG_ON")
endif(WITH_NEMO_LOG)

add_subdirectory(shell)
add_subdirectory(resources)
